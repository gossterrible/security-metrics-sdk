# coding: utf-8

"""
    SMApi

    SecurityMetrics' Application Programming Interface  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@securitymetrics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantPost(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cc_email': 'str',
        'account_type': 'str',
        'acct_open_date': 'date',
        'adc_30_day_deadline': 'date',
        'adc_90_day_deadline': 'date',
        'adc_date': 'date',
        'address': 'str',
        'address2': 'str',
        'address3': 'str',
        'bank_account_status': 'str',
        'brand': 'str',
        'brand2': 'str',
        'business_model': 'str',
        'category': 'str',
        'certification_route': 'str',
        'chain_code': 'str',
        'channel': 'str',
        'channel_by_channel': 'bool',
        'city': 'str',
        'company_name': 'str',
        'contact_name': 'str',
        'country': 'str',
        'dba_name': 'str',
        'domain_name': 'str',
        'ecommerce': 'int',
        'email': 'str',
        'emv_percent_transactions': 'str',
        'ext_compliance': 'int',
        'ext_compliance_exp': 'date',
        'ext_saq_exp_date': 'date',
        'ext_saq_rec_date': 'date',
        'ext_saq_type': 'str',
        'ext_saq_vendor': 'str',
        'ext_saq_version': 'str',
        'ext_scan_exp_date': 'date',
        'ext_scan_qty': 'int',
        'ext_scan_rec_date': 'date',
        'ext_scan_vendor': 'str',
        'f2f': 'bool',
        'fax': 'str',
        'headquarters': 'bool',
        'isa_name': 'str',
        'last_pa_report_received': 'date',
        'level': 'int',
        'mcc': 'int',
        'mid': 'str',
        'misc1': 'str',
        'misc2': 'str',
        'misc3': 'int',
        'misc4': 'float',
        'misc5': 'str',
        'misc6': 'str',
        'moto': 'bool',
        'next_contact_date': 'datetime',
        'non_emv_number_transactions': 'int',
        'online_presence': 'bool',
        'p2pe_solution': 'bool',
        'parent_account': 'str',
        'payment_processor': 'str',
        'pci_manager': 'str',
        'phone': 'str',
        'planned_compliance_date': 'date',
        'platform': 'str',
        'postal_code': 'str',
        'previous_pci_manager': 'str',
        'primary_mid': 'str',
        'prior_adc_level': 'str',
        'qsa_name': 'str',
        'reclassification_date': 'date',
        'repid': 'str',
        'repname': 'str',
        'risky': 'bool',
        'roc_expiration': 'date',
        'roc_status': 'int',
        'roc_vendor': 'str',
        'sad_removal_date': 'date',
        'sad_storage': 'str',
        'sad_storage_call_recordings_only': 'str',
        'sales_office': 'str',
        'special_relationship': 'str',
        'state': 'str',
        'tip_participant': 'bool',
        'trans_dollar_yearly_ae': 'float',
        'trans_dollar_yearly_discover': 'float',
        'trans_dollar_yearly_mc': 'float',
        'trans_dollar_yearly_visa': 'float',
        'trans_num_yearly_ae': 'int',
        'trans_num_yearly_discover': 'int',
        'trans_num_yearly_mc': 'int',
        'trans_num_yearly_visa': 'int'
    }

    attribute_map = {
        'cc_email': '_cc_email',
        'account_type': 'account_type',
        'acct_open_date': 'acct_open_date',
        'adc_30_day_deadline': 'adc_30_day_deadline',
        'adc_90_day_deadline': 'adc_90_day_deadline',
        'adc_date': 'adc_date',
        'address': 'address',
        'address2': 'address2',
        'address3': 'address3',
        'bank_account_status': 'bank_account_status',
        'brand': 'brand',
        'brand2': 'brand2',
        'business_model': 'business_model',
        'category': 'category',
        'certification_route': 'certification_route',
        'chain_code': 'chain_code',
        'channel': 'channel',
        'channel_by_channel': 'channel_by_channel',
        'city': 'city',
        'company_name': 'company_name',
        'contact_name': 'contact_name',
        'country': 'country',
        'dba_name': 'dba_name',
        'domain_name': 'domain_name',
        'ecommerce': 'ecommerce',
        'email': 'email',
        'emv_percent_transactions': 'emv_percent_transactions',
        'ext_compliance': 'ext_compliance',
        'ext_compliance_exp': 'ext_compliance_exp',
        'ext_saq_exp_date': 'ext_saq_exp_date',
        'ext_saq_rec_date': 'ext_saq_rec_date',
        'ext_saq_type': 'ext_saq_type',
        'ext_saq_vendor': 'ext_saq_vendor',
        'ext_saq_version': 'ext_saq_version',
        'ext_scan_exp_date': 'ext_scan_exp_date',
        'ext_scan_qty': 'ext_scan_qty',
        'ext_scan_rec_date': 'ext_scan_rec_date',
        'ext_scan_vendor': 'ext_scan_vendor',
        'f2f': 'f2f',
        'fax': 'fax',
        'headquarters': 'headquarters',
        'isa_name': 'isa_name',
        'last_pa_report_received': 'last_pa_report_received',
        'level': 'level',
        'mcc': 'mcc',
        'mid': 'mid',
        'misc1': 'misc1',
        'misc2': 'misc2',
        'misc3': 'misc3',
        'misc4': 'misc4',
        'misc5': 'misc5',
        'misc6': 'misc6',
        'moto': 'moto',
        'next_contact_date': 'next_contact_date',
        'non_emv_number_transactions': 'non_emv_number_transactions',
        'online_presence': 'online_presence',
        'p2pe_solution': 'p2pe_solution',
        'parent_account': 'parent_account',
        'payment_processor': 'payment_processor',
        'pci_manager': 'pci_manager',
        'phone': 'phone',
        'planned_compliance_date': 'planned_compliance_date',
        'platform': 'platform',
        'postal_code': 'postal_code',
        'previous_pci_manager': 'previous_pci_manager',
        'primary_mid': 'primary_mid',
        'prior_adc_level': 'prior_adc_level',
        'qsa_name': 'qsa_name',
        'reclassification_date': 'reclassification_date',
        'repid': 'repid',
        'repname': 'repname',
        'risky': 'risky',
        'roc_expiration': 'roc_expiration',
        'roc_status': 'roc_status',
        'roc_vendor': 'roc_vendor',
        'sad_removal_date': 'sad_removal_date',
        'sad_storage': 'sad_storage',
        'sad_storage_call_recordings_only': 'sad_storage_call_recordings_only',
        'sales_office': 'sales_office',
        'special_relationship': 'special_relationship',
        'state': 'state',
        'tip_participant': 'tip_participant',
        'trans_dollar_yearly_ae': 'trans_dollar_yearly_ae',
        'trans_dollar_yearly_discover': 'trans_dollar_yearly_discover',
        'trans_dollar_yearly_mc': 'trans_dollar_yearly_mc',
        'trans_dollar_yearly_visa': 'trans_dollar_yearly_visa',
        'trans_num_yearly_ae': 'trans_num_yearly_ae',
        'trans_num_yearly_discover': 'trans_num_yearly_discover',
        'trans_num_yearly_mc': 'trans_num_yearly_mc',
        'trans_num_yearly_visa': 'trans_num_yearly_visa'
    }

    def __init__(self, cc_email=None, account_type=None, acct_open_date=None, adc_30_day_deadline=None, adc_90_day_deadline=None, adc_date=None, address=None, address2=None, address3=None, bank_account_status=None, brand=None, brand2=None, business_model=None, category=None, certification_route=None, chain_code=None, channel=None, channel_by_channel=None, city=None, company_name=None, contact_name=None, country=None, dba_name=None, domain_name=None, ecommerce=None, email=None, emv_percent_transactions=None, ext_compliance=None, ext_compliance_exp=None, ext_saq_exp_date=None, ext_saq_rec_date=None, ext_saq_type=None, ext_saq_vendor=None, ext_saq_version=None, ext_scan_exp_date=None, ext_scan_qty=None, ext_scan_rec_date=None, ext_scan_vendor=None, f2f=None, fax=None, headquarters=None, isa_name=None, last_pa_report_received=None, level=None, mcc=None, mid=None, misc1=None, misc2=None, misc3=None, misc4=None, misc5=None, misc6=None, moto=None, next_contact_date=None, non_emv_number_transactions=None, online_presence=None, p2pe_solution=None, parent_account=None, payment_processor=None, pci_manager=None, phone=None, planned_compliance_date=None, platform=None, postal_code=None, previous_pci_manager=None, primary_mid=None, prior_adc_level=None, qsa_name=None, reclassification_date=None, repid=None, repname=None, risky=None, roc_expiration=None, roc_status=None, roc_vendor=None, sad_removal_date=None, sad_storage=None, sad_storage_call_recordings_only=None, sales_office=None, special_relationship=None, state=None, tip_participant=None, trans_dollar_yearly_ae=None, trans_dollar_yearly_discover=None, trans_dollar_yearly_mc=None, trans_dollar_yearly_visa=None, trans_num_yearly_ae=None, trans_num_yearly_discover=None, trans_num_yearly_mc=None, trans_num_yearly_visa=None):  # noqa: E501
        """MerchantPost - a model defined in Swagger"""  # noqa: E501
        self._cc_email = None
        self._account_type = None
        self._acct_open_date = None
        self._adc_30_day_deadline = None
        self._adc_90_day_deadline = None
        self._adc_date = None
        self._address = None
        self._address2 = None
        self._address3 = None
        self._bank_account_status = None
        self._brand = None
        self._brand2 = None
        self._business_model = None
        self._category = None
        self._certification_route = None
        self._chain_code = None
        self._channel = None
        self._channel_by_channel = None
        self._city = None
        self._company_name = None
        self._contact_name = None
        self._country = None
        self._dba_name = None
        self._domain_name = None
        self._ecommerce = None
        self._email = None
        self._emv_percent_transactions = None
        self._ext_compliance = None
        self._ext_compliance_exp = None
        self._ext_saq_exp_date = None
        self._ext_saq_rec_date = None
        self._ext_saq_type = None
        self._ext_saq_vendor = None
        self._ext_saq_version = None
        self._ext_scan_exp_date = None
        self._ext_scan_qty = None
        self._ext_scan_rec_date = None
        self._ext_scan_vendor = None
        self._f2f = None
        self._fax = None
        self._headquarters = None
        self._isa_name = None
        self._last_pa_report_received = None
        self._level = None
        self._mcc = None
        self._mid = None
        self._misc1 = None
        self._misc2 = None
        self._misc3 = None
        self._misc4 = None
        self._misc5 = None
        self._misc6 = None
        self._moto = None
        self._next_contact_date = None
        self._non_emv_number_transactions = None
        self._online_presence = None
        self._p2pe_solution = None
        self._parent_account = None
        self._payment_processor = None
        self._pci_manager = None
        self._phone = None
        self._planned_compliance_date = None
        self._platform = None
        self._postal_code = None
        self._previous_pci_manager = None
        self._primary_mid = None
        self._prior_adc_level = None
        self._qsa_name = None
        self._reclassification_date = None
        self._repid = None
        self._repname = None
        self._risky = None
        self._roc_expiration = None
        self._roc_status = None
        self._roc_vendor = None
        self._sad_removal_date = None
        self._sad_storage = None
        self._sad_storage_call_recordings_only = None
        self._sales_office = None
        self._special_relationship = None
        self._state = None
        self._tip_participant = None
        self._trans_dollar_yearly_ae = None
        self._trans_dollar_yearly_discover = None
        self._trans_dollar_yearly_mc = None
        self._trans_dollar_yearly_visa = None
        self._trans_num_yearly_ae = None
        self._trans_num_yearly_discover = None
        self._trans_num_yearly_mc = None
        self._trans_num_yearly_visa = None
        self.discriminator = None
        if cc_email is not None:
            self.cc_email = cc_email
        if account_type is not None:
            self.account_type = account_type
        if acct_open_date is not None:
            self.acct_open_date = acct_open_date
        if adc_30_day_deadline is not None:
            self.adc_30_day_deadline = adc_30_day_deadline
        if adc_90_day_deadline is not None:
            self.adc_90_day_deadline = adc_90_day_deadline
        if adc_date is not None:
            self.adc_date = adc_date
        if address is not None:
            self.address = address
        if address2 is not None:
            self.address2 = address2
        if address3 is not None:
            self.address3 = address3
        if bank_account_status is not None:
            self.bank_account_status = bank_account_status
        if brand is not None:
            self.brand = brand
        if brand2 is not None:
            self.brand2 = brand2
        if business_model is not None:
            self.business_model = business_model
        if category is not None:
            self.category = category
        if certification_route is not None:
            self.certification_route = certification_route
        if chain_code is not None:
            self.chain_code = chain_code
        if channel is not None:
            self.channel = channel
        if channel_by_channel is not None:
            self.channel_by_channel = channel_by_channel
        if city is not None:
            self.city = city
        if company_name is not None:
            self.company_name = company_name
        if contact_name is not None:
            self.contact_name = contact_name
        if country is not None:
            self.country = country
        if dba_name is not None:
            self.dba_name = dba_name
        if domain_name is not None:
            self.domain_name = domain_name
        if ecommerce is not None:
            self.ecommerce = ecommerce
        if email is not None:
            self.email = email
        if emv_percent_transactions is not None:
            self.emv_percent_transactions = emv_percent_transactions
        if ext_compliance is not None:
            self.ext_compliance = ext_compliance
        if ext_compliance_exp is not None:
            self.ext_compliance_exp = ext_compliance_exp
        if ext_saq_exp_date is not None:
            self.ext_saq_exp_date = ext_saq_exp_date
        if ext_saq_rec_date is not None:
            self.ext_saq_rec_date = ext_saq_rec_date
        if ext_saq_type is not None:
            self.ext_saq_type = ext_saq_type
        if ext_saq_vendor is not None:
            self.ext_saq_vendor = ext_saq_vendor
        if ext_saq_version is not None:
            self.ext_saq_version = ext_saq_version
        if ext_scan_exp_date is not None:
            self.ext_scan_exp_date = ext_scan_exp_date
        if ext_scan_qty is not None:
            self.ext_scan_qty = ext_scan_qty
        if ext_scan_rec_date is not None:
            self.ext_scan_rec_date = ext_scan_rec_date
        if ext_scan_vendor is not None:
            self.ext_scan_vendor = ext_scan_vendor
        if f2f is not None:
            self.f2f = f2f
        if fax is not None:
            self.fax = fax
        if headquarters is not None:
            self.headquarters = headquarters
        if isa_name is not None:
            self.isa_name = isa_name
        if last_pa_report_received is not None:
            self.last_pa_report_received = last_pa_report_received
        if level is not None:
            self.level = level
        if mcc is not None:
            self.mcc = mcc
        if mid is not None:
            self.mid = mid
        if misc1 is not None:
            self.misc1 = misc1
        if misc2 is not None:
            self.misc2 = misc2
        if misc3 is not None:
            self.misc3 = misc3
        if misc4 is not None:
            self.misc4 = misc4
        if misc5 is not None:
            self.misc5 = misc5
        if misc6 is not None:
            self.misc6 = misc6
        if moto is not None:
            self.moto = moto
        if next_contact_date is not None:
            self.next_contact_date = next_contact_date
        if non_emv_number_transactions is not None:
            self.non_emv_number_transactions = non_emv_number_transactions
        if online_presence is not None:
            self.online_presence = online_presence
        if p2pe_solution is not None:
            self.p2pe_solution = p2pe_solution
        if parent_account is not None:
            self.parent_account = parent_account
        if payment_processor is not None:
            self.payment_processor = payment_processor
        if pci_manager is not None:
            self.pci_manager = pci_manager
        if phone is not None:
            self.phone = phone
        if planned_compliance_date is not None:
            self.planned_compliance_date = planned_compliance_date
        if platform is not None:
            self.platform = platform
        if postal_code is not None:
            self.postal_code = postal_code
        if previous_pci_manager is not None:
            self.previous_pci_manager = previous_pci_manager
        if primary_mid is not None:
            self.primary_mid = primary_mid
        if prior_adc_level is not None:
            self.prior_adc_level = prior_adc_level
        if qsa_name is not None:
            self.qsa_name = qsa_name
        if reclassification_date is not None:
            self.reclassification_date = reclassification_date
        if repid is not None:
            self.repid = repid
        if repname is not None:
            self.repname = repname
        if risky is not None:
            self.risky = risky
        if roc_expiration is not None:
            self.roc_expiration = roc_expiration
        if roc_status is not None:
            self.roc_status = roc_status
        if roc_vendor is not None:
            self.roc_vendor = roc_vendor
        if sad_removal_date is not None:
            self.sad_removal_date = sad_removal_date
        if sad_storage is not None:
            self.sad_storage = sad_storage
        if sad_storage_call_recordings_only is not None:
            self.sad_storage_call_recordings_only = sad_storage_call_recordings_only
        if sales_office is not None:
            self.sales_office = sales_office
        if special_relationship is not None:
            self.special_relationship = special_relationship
        if state is not None:
            self.state = state
        if tip_participant is not None:
            self.tip_participant = tip_participant
        if trans_dollar_yearly_ae is not None:
            self.trans_dollar_yearly_ae = trans_dollar_yearly_ae
        if trans_dollar_yearly_discover is not None:
            self.trans_dollar_yearly_discover = trans_dollar_yearly_discover
        if trans_dollar_yearly_mc is not None:
            self.trans_dollar_yearly_mc = trans_dollar_yearly_mc
        if trans_dollar_yearly_visa is not None:
            self.trans_dollar_yearly_visa = trans_dollar_yearly_visa
        if trans_num_yearly_ae is not None:
            self.trans_num_yearly_ae = trans_num_yearly_ae
        if trans_num_yearly_discover is not None:
            self.trans_num_yearly_discover = trans_num_yearly_discover
        if trans_num_yearly_mc is not None:
            self.trans_num_yearly_mc = trans_num_yearly_mc
        if trans_num_yearly_visa is not None:
            self.trans_num_yearly_visa = trans_num_yearly_visa

    @property
    def cc_email(self):
        """Gets the cc_email of this MerchantPost.  # noqa: E501

        List of email addresses to copy communications to  # noqa: E501

        :return: The cc_email of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._cc_email

    @cc_email.setter
    def cc_email(self, cc_email):
        """Sets the cc_email of this MerchantPost.

        List of email addresses to copy communications to  # noqa: E501

        :param cc_email: The cc_email of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._cc_email = cc_email

    @property
    def account_type(self):
        """Gets the account_type of this MerchantPost.  # noqa: E501

        Type of account  # noqa: E501

        :return: The account_type of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this MerchantPost.

        Type of account  # noqa: E501

        :param account_type: The account_type of this MerchantPost.  # noqa: E501
        :type: str
        """
        allowed_values = ["New", "Existing", "Reclassified"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def acct_open_date(self):
        """Gets the acct_open_date of this MerchantPost.  # noqa: E501

        Date when Partner marked account open  # noqa: E501

        :return: The acct_open_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._acct_open_date

    @acct_open_date.setter
    def acct_open_date(self, acct_open_date):
        """Sets the acct_open_date of this MerchantPost.

        Date when Partner marked account open  # noqa: E501

        :param acct_open_date: The acct_open_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._acct_open_date = acct_open_date

    @property
    def adc_30_day_deadline(self):
        """Gets the adc_30_day_deadline of this MerchantPost.  # noqa: E501

        Account Data Compromised 30 Day Deadline  # noqa: E501

        :return: The adc_30_day_deadline of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._adc_30_day_deadline

    @adc_30_day_deadline.setter
    def adc_30_day_deadline(self, adc_30_day_deadline):
        """Sets the adc_30_day_deadline of this MerchantPost.

        Account Data Compromised 30 Day Deadline  # noqa: E501

        :param adc_30_day_deadline: The adc_30_day_deadline of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._adc_30_day_deadline = adc_30_day_deadline

    @property
    def adc_90_day_deadline(self):
        """Gets the adc_90_day_deadline of this MerchantPost.  # noqa: E501

        Account Data Compromised 90 Day Deadline  # noqa: E501

        :return: The adc_90_day_deadline of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._adc_90_day_deadline

    @adc_90_day_deadline.setter
    def adc_90_day_deadline(self, adc_90_day_deadline):
        """Sets the adc_90_day_deadline of this MerchantPost.

        Account Data Compromised 90 Day Deadline  # noqa: E501

        :param adc_90_day_deadline: The adc_90_day_deadline of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._adc_90_day_deadline = adc_90_day_deadline

    @property
    def adc_date(self):
        """Gets the adc_date of this MerchantPost.  # noqa: E501

        Account Data Compromised date  # noqa: E501

        :return: The adc_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._adc_date

    @adc_date.setter
    def adc_date(self, adc_date):
        """Sets the adc_date of this MerchantPost.

        Account Data Compromised date  # noqa: E501

        :param adc_date: The adc_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._adc_date = adc_date

    @property
    def address(self):
        """Gets the address of this MerchantPost.  # noqa: E501

        Line 1 of address  # noqa: E501

        :return: The address of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this MerchantPost.

        Line 1 of address  # noqa: E501

        :param address: The address of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this MerchantPost.  # noqa: E501

        Line 2 of address  # noqa: E501

        :return: The address2 of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this MerchantPost.

        Line 2 of address  # noqa: E501

        :param address2: The address2 of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this MerchantPost.  # noqa: E501

        Line 3 of address  # noqa: E501

        :return: The address3 of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this MerchantPost.

        Line 3 of address  # noqa: E501

        :param address3: The address3 of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._address3 = address3

    @property
    def bank_account_status(self):
        """Gets the bank_account_status of this MerchantPost.  # noqa: E501

        The Merchant's status with their bank. Options are: 'Active', 'Inactive', 'Deactivated', 'Closed'  # noqa: E501

        :return: The bank_account_status of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_status

    @bank_account_status.setter
    def bank_account_status(self, bank_account_status):
        """Sets the bank_account_status of this MerchantPost.

        The Merchant's status with their bank. Options are: 'Active', 'Inactive', 'Deactivated', 'Closed'  # noqa: E501

        :param bank_account_status: The bank_account_status of this MerchantPost.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Inactive", "Deactivated", "Closed"]  # noqa: E501
        if bank_account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_account_status` ({0}), must be one of {1}"  # noqa: E501
                .format(bank_account_status, allowed_values)
            )

        self._bank_account_status = bank_account_status

    @property
    def brand(self):
        """Gets the brand of this MerchantPost.  # noqa: E501

        Used to indicate which ISO a Merchant is with under a given large Partner  # noqa: E501

        :return: The brand of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this MerchantPost.

        Used to indicate which ISO a Merchant is with under a given large Partner  # noqa: E501

        :param brand: The brand of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def brand2(self):
        """Gets the brand2 of this MerchantPost.  # noqa: E501

        An Additional Brand for the Merchant  # noqa: E501

        :return: The brand2 of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._brand2

    @brand2.setter
    def brand2(self, brand2):
        """Sets the brand2 of this MerchantPost.

        An Additional Brand for the Merchant  # noqa: E501

        :param brand2: The brand2 of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._brand2 = brand2

    @property
    def business_model(self):
        """Gets the business_model of this MerchantPost.  # noqa: E501

        The Business Model (Corporate or Franchise)  # noqa: E501

        :return: The business_model of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._business_model

    @business_model.setter
    def business_model(self, business_model):
        """Sets the business_model of this MerchantPost.

        The Business Model (Corporate or Franchise)  # noqa: E501

        :param business_model: The business_model of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._business_model = business_model

    @property
    def category(self):
        """Gets the category of this MerchantPost.  # noqa: E501

        One of the following Merchant Categories - Merchant (default), Payment Gateway, Shopping Cart, Fulfillment, Hosting Provider  # noqa: E501

        :return: The category of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MerchantPost.

        One of the following Merchant Categories - Merchant (default), Payment Gateway, Shopping Cart, Fulfillment, Hosting Provider  # noqa: E501

        :param category: The category of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def certification_route(self):
        """Gets the certification_route of this MerchantPost.  # noqa: E501

        Means by which PCI Compliance was achieved  # noqa: E501

        :return: The certification_route of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._certification_route

    @certification_route.setter
    def certification_route(self, certification_route):
        """Sets the certification_route of this MerchantPost.

        Means by which PCI Compliance was achieved  # noqa: E501

        :param certification_route: The certification_route of this MerchantPost.  # noqa: E501
        :type: str
        """
        allowed_values = ["ISA", "QSA", "Self"]  # noqa: E501
        if certification_route not in allowed_values:
            raise ValueError(
                "Invalid value for `certification_route` ({0}), must be one of {1}"  # noqa: E501
                .format(certification_route, allowed_values)
            )

        self._certification_route = certification_route

    @property
    def chain_code(self):
        """Gets the chain_code of this MerchantPost.  # noqa: E501

        Code for internal merchant chaining  # noqa: E501

        :return: The chain_code of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._chain_code

    @chain_code.setter
    def chain_code(self, chain_code):
        """Sets the chain_code of this MerchantPost.

        Code for internal merchant chaining  # noqa: E501

        :param chain_code: The chain_code of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._chain_code = chain_code

    @property
    def channel(self):
        """Gets the channel of this MerchantPost.  # noqa: E501

        Channel name for Partner. Typical values may include \"RSA\", \"FDIS\", \"Agent\", \"ISO\", etc.  # noqa: E501

        :return: The channel of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this MerchantPost.

        Channel name for Partner. Typical values may include \"RSA\", \"FDIS\", \"Agent\", \"ISO\", etc.  # noqa: E501

        :param channel: The channel of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def channel_by_channel(self):
        """Gets the channel_by_channel of this MerchantPost.  # noqa: E501

        Does channel by channel  # noqa: E501

        :return: The channel_by_channel of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._channel_by_channel

    @channel_by_channel.setter
    def channel_by_channel(self, channel_by_channel):
        """Sets the channel_by_channel of this MerchantPost.

        Does channel by channel  # noqa: E501

        :param channel_by_channel: The channel_by_channel of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._channel_by_channel = channel_by_channel

    @property
    def city(self):
        """Gets the city of this MerchantPost.  # noqa: E501

        City  # noqa: E501

        :return: The city of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this MerchantPost.

        City  # noqa: E501

        :param city: The city of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this MerchantPost.  # noqa: E501

        Name of the company  # noqa: E501

        :return: The company_name of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this MerchantPost.

        Name of the company  # noqa: E501

        :param company_name: The company_name of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def contact_name(self):
        """Gets the contact_name of this MerchantPost.  # noqa: E501

        Full name of administrative contact  # noqa: E501

        :return: The contact_name of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this MerchantPost.

        Full name of administrative contact  # noqa: E501

        :param contact_name: The contact_name of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def country(self):
        """Gets the country of this MerchantPost.  # noqa: E501

        Country of Merchant  # noqa: E501

        :return: The country of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this MerchantPost.

        Country of Merchant  # noqa: E501

        :param country: The country of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def dba_name(self):
        """Gets the dba_name of this MerchantPost.  # noqa: E501

        Doing Business As name  # noqa: E501

        :return: The dba_name of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._dba_name

    @dba_name.setter
    def dba_name(self, dba_name):
        """Sets the dba_name of this MerchantPost.

        Doing Business As name  # noqa: E501

        :param dba_name: The dba_name of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._dba_name = dba_name

    @property
    def domain_name(self):
        """Gets the domain_name of this MerchantPost.  # noqa: E501

        Domain name of Merchant  # noqa: E501

        :return: The domain_name of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this MerchantPost.

        Domain name of Merchant  # noqa: E501

        :param domain_name: The domain_name of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def ecommerce(self):
        """Gets the ecommerce of this MerchantPost.  # noqa: E501

        The kind of Merchant this Merchant is. 0 - Blank, 1 - Unknown, 2 - Info Only, 3 - Merchant, 4 - Third Party  # noqa: E501

        :return: The ecommerce of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._ecommerce

    @ecommerce.setter
    def ecommerce(self, ecommerce):
        """Sets the ecommerce of this MerchantPost.

        The kind of Merchant this Merchant is. 0 - Blank, 1 - Unknown, 2 - Info Only, 3 - Merchant, 4 - Third Party  # noqa: E501

        :param ecommerce: The ecommerce of this MerchantPost.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 3, 4]  # noqa: E501
        if ecommerce not in allowed_values:
            raise ValueError(
                "Invalid value for `ecommerce` ({0}), must be one of {1}"  # noqa: E501
                .format(ecommerce, allowed_values)
            )

        self._ecommerce = ecommerce

    @property
    def email(self):
        """Gets the email of this MerchantPost.  # noqa: E501

        Email of administrative contact.  This is linked to a SecurityMetrics Customer  # noqa: E501

        :return: The email of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this MerchantPost.

        Email of administrative contact.  This is linked to a SecurityMetrics Customer  # noqa: E501

        :param email: The email of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def emv_percent_transactions(self):
        """Gets the emv_percent_transactions of this MerchantPost.  # noqa: E501

        Percentage of transactions that were EMV  # noqa: E501

        :return: The emv_percent_transactions of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._emv_percent_transactions

    @emv_percent_transactions.setter
    def emv_percent_transactions(self, emv_percent_transactions):
        """Sets the emv_percent_transactions of this MerchantPost.

        Percentage of transactions that were EMV  # noqa: E501

        :param emv_percent_transactions: The emv_percent_transactions of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._emv_percent_transactions = emv_percent_transactions

    @property
    def ext_compliance(self):
        """Gets the ext_compliance of this MerchantPost.  # noqa: E501

        PCI compliance grade from external company  # noqa: E501

        :return: The ext_compliance of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._ext_compliance

    @ext_compliance.setter
    def ext_compliance(self, ext_compliance):
        """Sets the ext_compliance of this MerchantPost.

        PCI compliance grade from external company  # noqa: E501

        :param ext_compliance: The ext_compliance of this MerchantPost.  # noqa: E501
        :type: int
        """
        allowed_values = [-1, 0, 1, 2, 3]  # noqa: E501
        if ext_compliance not in allowed_values:
            raise ValueError(
                "Invalid value for `ext_compliance` ({0}), must be one of {1}"  # noqa: E501
                .format(ext_compliance, allowed_values)
            )

        self._ext_compliance = ext_compliance

    @property
    def ext_compliance_exp(self):
        """Gets the ext_compliance_exp of this MerchantPost.  # noqa: E501

        External compliance expiration  # noqa: E501

        :return: The ext_compliance_exp of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._ext_compliance_exp

    @ext_compliance_exp.setter
    def ext_compliance_exp(self, ext_compliance_exp):
        """Sets the ext_compliance_exp of this MerchantPost.

        External compliance expiration  # noqa: E501

        :param ext_compliance_exp: The ext_compliance_exp of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._ext_compliance_exp = ext_compliance_exp

    @property
    def ext_saq_exp_date(self):
        """Gets the ext_saq_exp_date of this MerchantPost.  # noqa: E501

        Date external SAQ expires  # noqa: E501

        :return: The ext_saq_exp_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._ext_saq_exp_date

    @ext_saq_exp_date.setter
    def ext_saq_exp_date(self, ext_saq_exp_date):
        """Sets the ext_saq_exp_date of this MerchantPost.

        Date external SAQ expires  # noqa: E501

        :param ext_saq_exp_date: The ext_saq_exp_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._ext_saq_exp_date = ext_saq_exp_date

    @property
    def ext_saq_rec_date(self):
        """Gets the ext_saq_rec_date of this MerchantPost.  # noqa: E501

        Date external SAQ was recieved  # noqa: E501

        :return: The ext_saq_rec_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._ext_saq_rec_date

    @ext_saq_rec_date.setter
    def ext_saq_rec_date(self, ext_saq_rec_date):
        """Sets the ext_saq_rec_date of this MerchantPost.

        Date external SAQ was recieved  # noqa: E501

        :param ext_saq_rec_date: The ext_saq_rec_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._ext_saq_rec_date = ext_saq_rec_date

    @property
    def ext_saq_type(self):
        """Gets the ext_saq_type of this MerchantPost.  # noqa: E501

        SAQ type from external company  # noqa: E501

        :return: The ext_saq_type of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._ext_saq_type

    @ext_saq_type.setter
    def ext_saq_type(self, ext_saq_type):
        """Sets the ext_saq_type of this MerchantPost.

        SAQ type from external company  # noqa: E501

        :param ext_saq_type: The ext_saq_type of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._ext_saq_type = ext_saq_type

    @property
    def ext_saq_vendor(self):
        """Gets the ext_saq_vendor of this MerchantPost.  # noqa: E501

        External SAQ vendor  # noqa: E501

        :return: The ext_saq_vendor of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._ext_saq_vendor

    @ext_saq_vendor.setter
    def ext_saq_vendor(self, ext_saq_vendor):
        """Sets the ext_saq_vendor of this MerchantPost.

        External SAQ vendor  # noqa: E501

        :param ext_saq_vendor: The ext_saq_vendor of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._ext_saq_vendor = ext_saq_vendor

    @property
    def ext_saq_version(self):
        """Gets the ext_saq_version of this MerchantPost.  # noqa: E501

        SAQ version from external company  # noqa: E501

        :return: The ext_saq_version of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._ext_saq_version

    @ext_saq_version.setter
    def ext_saq_version(self, ext_saq_version):
        """Sets the ext_saq_version of this MerchantPost.

        SAQ version from external company  # noqa: E501

        :param ext_saq_version: The ext_saq_version of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._ext_saq_version = ext_saq_version

    @property
    def ext_scan_exp_date(self):
        """Gets the ext_scan_exp_date of this MerchantPost.  # noqa: E501

        Expiration date of external scans  # noqa: E501

        :return: The ext_scan_exp_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._ext_scan_exp_date

    @ext_scan_exp_date.setter
    def ext_scan_exp_date(self, ext_scan_exp_date):
        """Sets the ext_scan_exp_date of this MerchantPost.

        Expiration date of external scans  # noqa: E501

        :param ext_scan_exp_date: The ext_scan_exp_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._ext_scan_exp_date = ext_scan_exp_date

    @property
    def ext_scan_qty(self):
        """Gets the ext_scan_qty of this MerchantPost.  # noqa: E501

        Quantity of external scans  # noqa: E501

        :return: The ext_scan_qty of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._ext_scan_qty

    @ext_scan_qty.setter
    def ext_scan_qty(self, ext_scan_qty):
        """Sets the ext_scan_qty of this MerchantPost.

        Quantity of external scans  # noqa: E501

        :param ext_scan_qty: The ext_scan_qty of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._ext_scan_qty = ext_scan_qty

    @property
    def ext_scan_rec_date(self):
        """Gets the ext_scan_rec_date of this MerchantPost.  # noqa: E501

        Date of last external scan  # noqa: E501

        :return: The ext_scan_rec_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._ext_scan_rec_date

    @ext_scan_rec_date.setter
    def ext_scan_rec_date(self, ext_scan_rec_date):
        """Sets the ext_scan_rec_date of this MerchantPost.

        Date of last external scan  # noqa: E501

        :param ext_scan_rec_date: The ext_scan_rec_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._ext_scan_rec_date = ext_scan_rec_date

    @property
    def ext_scan_vendor(self):
        """Gets the ext_scan_vendor of this MerchantPost.  # noqa: E501

        Name of company doing scanning for this Merchant  # noqa: E501

        :return: The ext_scan_vendor of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._ext_scan_vendor

    @ext_scan_vendor.setter
    def ext_scan_vendor(self, ext_scan_vendor):
        """Sets the ext_scan_vendor of this MerchantPost.

        Name of company doing scanning for this Merchant  # noqa: E501

        :param ext_scan_vendor: The ext_scan_vendor of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._ext_scan_vendor = ext_scan_vendor

    @property
    def f2f(self):
        """Gets the f2f of this MerchantPost.  # noqa: E501

        Does Face to Face  # noqa: E501

        :return: The f2f of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._f2f

    @f2f.setter
    def f2f(self, f2f):
        """Sets the f2f of this MerchantPost.

        Does Face to Face  # noqa: E501

        :param f2f: The f2f of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._f2f = f2f

    @property
    def fax(self):
        """Gets the fax of this MerchantPost.  # noqa: E501

        Fax number of administrative contact  # noqa: E501

        :return: The fax of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this MerchantPost.

        Fax number of administrative contact  # noqa: E501

        :param fax: The fax of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def headquarters(self):
        """Gets the headquarters of this MerchantPost.  # noqa: E501


        :return: The headquarters of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._headquarters

    @headquarters.setter
    def headquarters(self, headquarters):
        """Sets the headquarters of this MerchantPost.


        :param headquarters: The headquarters of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._headquarters = headquarters

    @property
    def isa_name(self):
        """Gets the isa_name of this MerchantPost.  # noqa: E501

        Name of Internal Security Assessor  # noqa: E501

        :return: The isa_name of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._isa_name

    @isa_name.setter
    def isa_name(self, isa_name):
        """Sets the isa_name of this MerchantPost.

        Name of Internal Security Assessor  # noqa: E501

        :param isa_name: The isa_name of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._isa_name = isa_name

    @property
    def last_pa_report_received(self):
        """Gets the last_pa_report_received of this MerchantPost.  # noqa: E501

        Date of when the last Prioritized Approach report was recieved  # noqa: E501

        :return: The last_pa_report_received of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._last_pa_report_received

    @last_pa_report_received.setter
    def last_pa_report_received(self, last_pa_report_received):
        """Sets the last_pa_report_received of this MerchantPost.

        Date of when the last Prioritized Approach report was recieved  # noqa: E501

        :param last_pa_report_received: The last_pa_report_received of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._last_pa_report_received = last_pa_report_received

    @property
    def level(self):
        """Gets the level of this MerchantPost.  # noqa: E501

        The Merchant level for this Merchant  # noqa: E501

        :return: The level of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this MerchantPost.

        The Merchant level for this Merchant  # noqa: E501

        :param level: The level of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def mcc(self):
        """Gets the mcc of this MerchantPost.  # noqa: E501

        Merchant Category Code  # noqa: E501

        :return: The mcc of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this MerchantPost.

        Merchant Category Code  # noqa: E501

        :param mcc: The mcc of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._mcc = mcc

    @property
    def mid(self):
        """Gets the mid of this MerchantPost.  # noqa: E501

        The unique merchant id provided by the acquiring Partner  # noqa: E501

        :return: The mid of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._mid

    @mid.setter
    def mid(self, mid):
        """Sets the mid of this MerchantPost.

        The unique merchant id provided by the acquiring Partner  # noqa: E501

        :param mid: The mid of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._mid = mid

    @property
    def misc1(self):
        """Gets the misc1 of this MerchantPost.  # noqa: E501

        Miscellaneous text field 1 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :return: The misc1 of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._misc1

    @misc1.setter
    def misc1(self, misc1):
        """Sets the misc1 of this MerchantPost.

        Miscellaneous text field 1 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :param misc1: The misc1 of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._misc1 = misc1

    @property
    def misc2(self):
        """Gets the misc2 of this MerchantPost.  # noqa: E501

        Miscellaneous text field 2 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :return: The misc2 of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._misc2

    @misc2.setter
    def misc2(self, misc2):
        """Sets the misc2 of this MerchantPost.

        Miscellaneous text field 2 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :param misc2: The misc2 of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._misc2 = misc2

    @property
    def misc3(self):
        """Gets the misc3 of this MerchantPost.  # noqa: E501

        Miscellaneous integer field for Partner data  # noqa: E501

        :return: The misc3 of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._misc3

    @misc3.setter
    def misc3(self, misc3):
        """Sets the misc3 of this MerchantPost.

        Miscellaneous integer field for Partner data  # noqa: E501

        :param misc3: The misc3 of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._misc3 = misc3

    @property
    def misc4(self):
        """Gets the misc4 of this MerchantPost.  # noqa: E501

        Miscellaneous decimal/numeric field for Partner data  # noqa: E501

        :return: The misc4 of this MerchantPost.  # noqa: E501
        :rtype: float
        """
        return self._misc4

    @misc4.setter
    def misc4(self, misc4):
        """Sets the misc4 of this MerchantPost.

        Miscellaneous decimal/numeric field for Partner data  # noqa: E501

        :param misc4: The misc4 of this MerchantPost.  # noqa: E501
        :type: float
        """

        self._misc4 = misc4

    @property
    def misc5(self):
        """Gets the misc5 of this MerchantPost.  # noqa: E501

        Miscellaneous text field 5 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :return: The misc5 of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._misc5

    @misc5.setter
    def misc5(self, misc5):
        """Sets the misc5 of this MerchantPost.

        Miscellaneous text field 5 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :param misc5: The misc5 of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._misc5 = misc5

    @property
    def misc6(self):
        """Gets the misc6 of this MerchantPost.  # noqa: E501

        Miscellaneous text field 6 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :return: The misc6 of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._misc6

    @misc6.setter
    def misc6(self, misc6):
        """Sets the misc6 of this MerchantPost.

        Miscellaneous text field 6 for Partner data.  MAX LENGTH: 64  # noqa: E501

        :param misc6: The misc6 of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._misc6 = misc6

    @property
    def moto(self):
        """Gets the moto of this MerchantPost.  # noqa: E501

        Does Mail Order/Telephone Order  # noqa: E501

        :return: The moto of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._moto

    @moto.setter
    def moto(self, moto):
        """Sets the moto of this MerchantPost.

        Does Mail Order/Telephone Order  # noqa: E501

        :param moto: The moto of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._moto = moto

    @property
    def next_contact_date(self):
        """Gets the next_contact_date of this MerchantPost.  # noqa: E501

        Date field tracking when the merchant should be contacted next  # noqa: E501

        :return: The next_contact_date of this MerchantPost.  # noqa: E501
        :rtype: datetime
        """
        return self._next_contact_date

    @next_contact_date.setter
    def next_contact_date(self, next_contact_date):
        """Sets the next_contact_date of this MerchantPost.

        Date field tracking when the merchant should be contacted next  # noqa: E501

        :param next_contact_date: The next_contact_date of this MerchantPost.  # noqa: E501
        :type: datetime
        """

        self._next_contact_date = next_contact_date

    @property
    def non_emv_number_transactions(self):
        """Gets the non_emv_number_transactions of this MerchantPost.  # noqa: E501

        Number of transactions that were not EMV  # noqa: E501

        :return: The non_emv_number_transactions of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._non_emv_number_transactions

    @non_emv_number_transactions.setter
    def non_emv_number_transactions(self, non_emv_number_transactions):
        """Sets the non_emv_number_transactions of this MerchantPost.

        Number of transactions that were not EMV  # noqa: E501

        :param non_emv_number_transactions: The non_emv_number_transactions of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._non_emv_number_transactions = non_emv_number_transactions

    @property
    def online_presence(self):
        """Gets the online_presence of this MerchantPost.  # noqa: E501

        True is this Merchant has an online presence  # noqa: E501

        :return: The online_presence of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._online_presence

    @online_presence.setter
    def online_presence(self, online_presence):
        """Sets the online_presence of this MerchantPost.

        True is this Merchant has an online presence  # noqa: E501

        :param online_presence: The online_presence of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._online_presence = online_presence

    @property
    def p2pe_solution(self):
        """Gets the p2pe_solution of this MerchantPost.  # noqa: E501

        Has P2PE solution  # noqa: E501

        :return: The p2pe_solution of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._p2pe_solution

    @p2pe_solution.setter
    def p2pe_solution(self, p2pe_solution):
        """Sets the p2pe_solution of this MerchantPost.

        Has P2PE solution  # noqa: E501

        :param p2pe_solution: The p2pe_solution of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._p2pe_solution = p2pe_solution

    @property
    def parent_account(self):
        """Gets the parent_account of this MerchantPost.  # noqa: E501

        the email of the parent account for the merchant  # noqa: E501

        :return: The parent_account of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._parent_account

    @parent_account.setter
    def parent_account(self, parent_account):
        """Sets the parent_account of this MerchantPost.

        the email of the parent account for the merchant  # noqa: E501

        :param parent_account: The parent_account of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._parent_account = parent_account

    @property
    def payment_processor(self):
        """Gets the payment_processor of this MerchantPost.  # noqa: E501

        merchant payment processor  # noqa: E501

        :return: The payment_processor of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._payment_processor

    @payment_processor.setter
    def payment_processor(self, payment_processor):
        """Sets the payment_processor of this MerchantPost.

        merchant payment processor  # noqa: E501

        :param payment_processor: The payment_processor of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._payment_processor = payment_processor

    @property
    def pci_manager(self):
        """Gets the pci_manager of this MerchantPost.  # noqa: E501

        Individual managing this merchant's account  # noqa: E501

        :return: The pci_manager of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._pci_manager

    @pci_manager.setter
    def pci_manager(self, pci_manager):
        """Sets the pci_manager of this MerchantPost.

        Individual managing this merchant's account  # noqa: E501

        :param pci_manager: The pci_manager of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._pci_manager = pci_manager

    @property
    def phone(self):
        """Gets the phone of this MerchantPost.  # noqa: E501

        Phone number of administrative contact  # noqa: E501

        :return: The phone of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this MerchantPost.

        Phone number of administrative contact  # noqa: E501

        :param phone: The phone of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def planned_compliance_date(self):
        """Gets the planned_compliance_date of this MerchantPost.  # noqa: E501

        Date planned to become compliance  # noqa: E501

        :return: The planned_compliance_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._planned_compliance_date

    @planned_compliance_date.setter
    def planned_compliance_date(self, planned_compliance_date):
        """Sets the planned_compliance_date of this MerchantPost.

        Date planned to become compliance  # noqa: E501

        :param planned_compliance_date: The planned_compliance_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._planned_compliance_date = planned_compliance_date

    @property
    def platform(self):
        """Gets the platform of this MerchantPost.  # noqa: E501

        Processing platform  # noqa: E501

        :return: The platform of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MerchantPost.

        Processing platform  # noqa: E501

        :param platform: The platform of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._platform = platform

    @property
    def postal_code(self):
        """Gets the postal_code of this MerchantPost.  # noqa: E501

        Zipcode/Postal code  # noqa: E501

        :return: The postal_code of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this MerchantPost.

        Zipcode/Postal code  # noqa: E501

        :param postal_code: The postal_code of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def previous_pci_manager(self):
        """Gets the previous_pci_manager of this MerchantPost.  # noqa: E501

        Individual who managed this merchant's account previous to the current manager  # noqa: E501

        :return: The previous_pci_manager of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._previous_pci_manager

    @previous_pci_manager.setter
    def previous_pci_manager(self, previous_pci_manager):
        """Sets the previous_pci_manager of this MerchantPost.

        Individual who managed this merchant's account previous to the current manager  # noqa: E501

        :param previous_pci_manager: The previous_pci_manager of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._previous_pci_manager = previous_pci_manager

    @property
    def primary_mid(self):
        """Gets the primary_mid of this MerchantPost.  # noqa: E501

        The mid of the Merchant this the primary Merchant for this Merchant  # noqa: E501

        :return: The primary_mid of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._primary_mid

    @primary_mid.setter
    def primary_mid(self, primary_mid):
        """Sets the primary_mid of this MerchantPost.

        The mid of the Merchant this the primary Merchant for this Merchant  # noqa: E501

        :param primary_mid: The primary_mid of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._primary_mid = primary_mid

    @property
    def prior_adc_level(self):
        """Gets the prior_adc_level of this MerchantPost.  # noqa: E501

        Account Data Compromised level  # noqa: E501

        :return: The prior_adc_level of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._prior_adc_level

    @prior_adc_level.setter
    def prior_adc_level(self, prior_adc_level):
        """Sets the prior_adc_level of this MerchantPost.

        Account Data Compromised level  # noqa: E501

        :param prior_adc_level: The prior_adc_level of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._prior_adc_level = prior_adc_level

    @property
    def qsa_name(self):
        """Gets the qsa_name of this MerchantPost.  # noqa: E501

        Name of Qualified Security Assessor  # noqa: E501

        :return: The qsa_name of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._qsa_name

    @qsa_name.setter
    def qsa_name(self, qsa_name):
        """Sets the qsa_name of this MerchantPost.

        Name of Qualified Security Assessor  # noqa: E501

        :param qsa_name: The qsa_name of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._qsa_name = qsa_name

    @property
    def reclassification_date(self):
        """Gets the reclassification_date of this MerchantPost.  # noqa: E501

        Date of reclassification  # noqa: E501

        :return: The reclassification_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._reclassification_date

    @reclassification_date.setter
    def reclassification_date(self, reclassification_date):
        """Sets the reclassification_date of this MerchantPost.

        Date of reclassification  # noqa: E501

        :param reclassification_date: The reclassification_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._reclassification_date = reclassification_date

    @property
    def repid(self):
        """Gets the repid of this MerchantPost.  # noqa: E501

        The Representative id for this Merchant  # noqa: E501

        :return: The repid of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._repid

    @repid.setter
    def repid(self, repid):
        """Sets the repid of this MerchantPost.

        The Representative id for this Merchant  # noqa: E501

        :param repid: The repid of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._repid = repid

    @property
    def repname(self):
        """Gets the repname of this MerchantPost.  # noqa: E501

        The Representative name for this Merchant  # noqa: E501

        :return: The repname of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._repname

    @repname.setter
    def repname(self, repname):
        """Sets the repname of this MerchantPost.

        The Representative name for this Merchant  # noqa: E501

        :param repname: The repname of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._repname = repname

    @property
    def risky(self):
        """Gets the risky of this MerchantPost.  # noqa: E501

        Risk Based Merchant  # noqa: E501

        :return: The risky of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._risky

    @risky.setter
    def risky(self, risky):
        """Sets the risky of this MerchantPost.

        Risk Based Merchant  # noqa: E501

        :param risky: The risky of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._risky = risky

    @property
    def roc_expiration(self):
        """Gets the roc_expiration of this MerchantPost.  # noqa: E501

        Expiration date of this Merchant's Report on Compliance  # noqa: E501

        :return: The roc_expiration of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._roc_expiration

    @roc_expiration.setter
    def roc_expiration(self, roc_expiration):
        """Sets the roc_expiration of this MerchantPost.

        Expiration date of this Merchant's Report on Compliance  # noqa: E501

        :param roc_expiration: The roc_expiration of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._roc_expiration = roc_expiration

    @property
    def roc_status(self):
        """Gets the roc_status of this MerchantPost.  # noqa: E501

        Report on Compliance status. -1 - No Vendor, 0 - Engaged, 1 - Completed, 2 - Approved  # noqa: E501

        :return: The roc_status of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._roc_status

    @roc_status.setter
    def roc_status(self, roc_status):
        """Sets the roc_status of this MerchantPost.

        Report on Compliance status. -1 - No Vendor, 0 - Engaged, 1 - Completed, 2 - Approved  # noqa: E501

        :param roc_status: The roc_status of this MerchantPost.  # noqa: E501
        :type: int
        """
        allowed_values = [-1, 0, 1, 2]  # noqa: E501
        if roc_status not in allowed_values:
            raise ValueError(
                "Invalid value for `roc_status` ({0}), must be one of {1}"  # noqa: E501
                .format(roc_status, allowed_values)
            )

        self._roc_status = roc_status

    @property
    def roc_vendor(self):
        """Gets the roc_vendor of this MerchantPost.  # noqa: E501

        Name of company doing this Merchant's Report on Compliance  # noqa: E501

        :return: The roc_vendor of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._roc_vendor

    @roc_vendor.setter
    def roc_vendor(self, roc_vendor):
        """Sets the roc_vendor of this MerchantPost.

        Name of company doing this Merchant's Report on Compliance  # noqa: E501

        :param roc_vendor: The roc_vendor of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._roc_vendor = roc_vendor

    @property
    def sad_removal_date(self):
        """Gets the sad_removal_date of this MerchantPost.  # noqa: E501

        Date of removal of Sensitive Authentication Data  # noqa: E501

        :return: The sad_removal_date of this MerchantPost.  # noqa: E501
        :rtype: date
        """
        return self._sad_removal_date

    @sad_removal_date.setter
    def sad_removal_date(self, sad_removal_date):
        """Sets the sad_removal_date of this MerchantPost.

        Date of removal of Sensitive Authentication Data  # noqa: E501

        :param sad_removal_date: The sad_removal_date of this MerchantPost.  # noqa: E501
        :type: date
        """

        self._sad_removal_date = sad_removal_date

    @property
    def sad_storage(self):
        """Gets the sad_storage of this MerchantPost.  # noqa: E501

        Sensitive Authentication Data storage  # noqa: E501

        :return: The sad_storage of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._sad_storage

    @sad_storage.setter
    def sad_storage(self, sad_storage):
        """Sets the sad_storage of this MerchantPost.

        Sensitive Authentication Data storage  # noqa: E501

        :param sad_storage: The sad_storage of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._sad_storage = sad_storage

    @property
    def sad_storage_call_recordings_only(self):
        """Gets the sad_storage_call_recordings_only of this MerchantPost.  # noqa: E501

        Sensitive Authentication Data storage call recordings  # noqa: E501

        :return: The sad_storage_call_recordings_only of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._sad_storage_call_recordings_only

    @sad_storage_call_recordings_only.setter
    def sad_storage_call_recordings_only(self, sad_storage_call_recordings_only):
        """Sets the sad_storage_call_recordings_only of this MerchantPost.

        Sensitive Authentication Data storage call recordings  # noqa: E501

        :param sad_storage_call_recordings_only: The sad_storage_call_recordings_only of this MerchantPost.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yes", "No", "TBC"]  # noqa: E501
        if sad_storage_call_recordings_only not in allowed_values:
            raise ValueError(
                "Invalid value for `sad_storage_call_recordings_only` ({0}), must be one of {1}"  # noqa: E501
                .format(sad_storage_call_recordings_only, allowed_values)
            )

        self._sad_storage_call_recordings_only = sad_storage_call_recordings_only

    @property
    def sales_office(self):
        """Gets the sales_office of this MerchantPost.  # noqa: E501

        Sales office ID or CSI-CAN Agent number  # noqa: E501

        :return: The sales_office of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._sales_office

    @sales_office.setter
    def sales_office(self, sales_office):
        """Sets the sales_office of this MerchantPost.

        Sales office ID or CSI-CAN Agent number  # noqa: E501

        :param sales_office: The sales_office of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._sales_office = sales_office

    @property
    def special_relationship(self):
        """Gets the special_relationship of this MerchantPost.  # noqa: E501

        Franchise or Special relationship  # noqa: E501

        :return: The special_relationship of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._special_relationship

    @special_relationship.setter
    def special_relationship(self, special_relationship):
        """Sets the special_relationship of this MerchantPost.

        Franchise or Special relationship  # noqa: E501

        :param special_relationship: The special_relationship of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._special_relationship = special_relationship

    @property
    def state(self):
        """Gets the state of this MerchantPost.  # noqa: E501

        State  # noqa: E501

        :return: The state of this MerchantPost.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MerchantPost.

        State  # noqa: E501

        :param state: The state of this MerchantPost.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def tip_participant(self):
        """Gets the tip_participant of this MerchantPost.  # noqa: E501

        Participates in TIP  # noqa: E501

        :return: The tip_participant of this MerchantPost.  # noqa: E501
        :rtype: bool
        """
        return self._tip_participant

    @tip_participant.setter
    def tip_participant(self, tip_participant):
        """Sets the tip_participant of this MerchantPost.

        Participates in TIP  # noqa: E501

        :param tip_participant: The tip_participant of this MerchantPost.  # noqa: E501
        :type: bool
        """

        self._tip_participant = tip_participant

    @property
    def trans_dollar_yearly_ae(self):
        """Gets the trans_dollar_yearly_ae of this MerchantPost.  # noqa: E501

        Annual dollar amount of American Express transactions  # noqa: E501

        :return: The trans_dollar_yearly_ae of this MerchantPost.  # noqa: E501
        :rtype: float
        """
        return self._trans_dollar_yearly_ae

    @trans_dollar_yearly_ae.setter
    def trans_dollar_yearly_ae(self, trans_dollar_yearly_ae):
        """Sets the trans_dollar_yearly_ae of this MerchantPost.

        Annual dollar amount of American Express transactions  # noqa: E501

        :param trans_dollar_yearly_ae: The trans_dollar_yearly_ae of this MerchantPost.  # noqa: E501
        :type: float
        """

        self._trans_dollar_yearly_ae = trans_dollar_yearly_ae

    @property
    def trans_dollar_yearly_discover(self):
        """Gets the trans_dollar_yearly_discover of this MerchantPost.  # noqa: E501

        Annual dollar amount of Discover transactions  # noqa: E501

        :return: The trans_dollar_yearly_discover of this MerchantPost.  # noqa: E501
        :rtype: float
        """
        return self._trans_dollar_yearly_discover

    @trans_dollar_yearly_discover.setter
    def trans_dollar_yearly_discover(self, trans_dollar_yearly_discover):
        """Sets the trans_dollar_yearly_discover of this MerchantPost.

        Annual dollar amount of Discover transactions  # noqa: E501

        :param trans_dollar_yearly_discover: The trans_dollar_yearly_discover of this MerchantPost.  # noqa: E501
        :type: float
        """

        self._trans_dollar_yearly_discover = trans_dollar_yearly_discover

    @property
    def trans_dollar_yearly_mc(self):
        """Gets the trans_dollar_yearly_mc of this MerchantPost.  # noqa: E501

        Annual dollar amount of MasterCard transactions  # noqa: E501

        :return: The trans_dollar_yearly_mc of this MerchantPost.  # noqa: E501
        :rtype: float
        """
        return self._trans_dollar_yearly_mc

    @trans_dollar_yearly_mc.setter
    def trans_dollar_yearly_mc(self, trans_dollar_yearly_mc):
        """Sets the trans_dollar_yearly_mc of this MerchantPost.

        Annual dollar amount of MasterCard transactions  # noqa: E501

        :param trans_dollar_yearly_mc: The trans_dollar_yearly_mc of this MerchantPost.  # noqa: E501
        :type: float
        """

        self._trans_dollar_yearly_mc = trans_dollar_yearly_mc

    @property
    def trans_dollar_yearly_visa(self):
        """Gets the trans_dollar_yearly_visa of this MerchantPost.  # noqa: E501

        Annual dollar amount of VISA transactions  # noqa: E501

        :return: The trans_dollar_yearly_visa of this MerchantPost.  # noqa: E501
        :rtype: float
        """
        return self._trans_dollar_yearly_visa

    @trans_dollar_yearly_visa.setter
    def trans_dollar_yearly_visa(self, trans_dollar_yearly_visa):
        """Sets the trans_dollar_yearly_visa of this MerchantPost.

        Annual dollar amount of VISA transactions  # noqa: E501

        :param trans_dollar_yearly_visa: The trans_dollar_yearly_visa of this MerchantPost.  # noqa: E501
        :type: float
        """

        self._trans_dollar_yearly_visa = trans_dollar_yearly_visa

    @property
    def trans_num_yearly_ae(self):
        """Gets the trans_num_yearly_ae of this MerchantPost.  # noqa: E501

        Anual number of American Express transactions  # noqa: E501

        :return: The trans_num_yearly_ae of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._trans_num_yearly_ae

    @trans_num_yearly_ae.setter
    def trans_num_yearly_ae(self, trans_num_yearly_ae):
        """Sets the trans_num_yearly_ae of this MerchantPost.

        Anual number of American Express transactions  # noqa: E501

        :param trans_num_yearly_ae: The trans_num_yearly_ae of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._trans_num_yearly_ae = trans_num_yearly_ae

    @property
    def trans_num_yearly_discover(self):
        """Gets the trans_num_yearly_discover of this MerchantPost.  # noqa: E501

        Anual number of Discover transactions  # noqa: E501

        :return: The trans_num_yearly_discover of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._trans_num_yearly_discover

    @trans_num_yearly_discover.setter
    def trans_num_yearly_discover(self, trans_num_yearly_discover):
        """Sets the trans_num_yearly_discover of this MerchantPost.

        Anual number of Discover transactions  # noqa: E501

        :param trans_num_yearly_discover: The trans_num_yearly_discover of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._trans_num_yearly_discover = trans_num_yearly_discover

    @property
    def trans_num_yearly_mc(self):
        """Gets the trans_num_yearly_mc of this MerchantPost.  # noqa: E501

        Anual number of MasterCard transactions  # noqa: E501

        :return: The trans_num_yearly_mc of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._trans_num_yearly_mc

    @trans_num_yearly_mc.setter
    def trans_num_yearly_mc(self, trans_num_yearly_mc):
        """Sets the trans_num_yearly_mc of this MerchantPost.

        Anual number of MasterCard transactions  # noqa: E501

        :param trans_num_yearly_mc: The trans_num_yearly_mc of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._trans_num_yearly_mc = trans_num_yearly_mc

    @property
    def trans_num_yearly_visa(self):
        """Gets the trans_num_yearly_visa of this MerchantPost.  # noqa: E501

        Annual number of VISA transactions  # noqa: E501

        :return: The trans_num_yearly_visa of this MerchantPost.  # noqa: E501
        :rtype: int
        """
        return self._trans_num_yearly_visa

    @trans_num_yearly_visa.setter
    def trans_num_yearly_visa(self, trans_num_yearly_visa):
        """Sets the trans_num_yearly_visa of this MerchantPost.

        Annual number of VISA transactions  # noqa: E501

        :param trans_num_yearly_visa: The trans_num_yearly_visa of this MerchantPost.  # noqa: E501
        :type: int
        """

        self._trans_num_yearly_visa = trans_num_yearly_visa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
