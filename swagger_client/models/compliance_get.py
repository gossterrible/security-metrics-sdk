# coding: utf-8

"""
    SMApi

    SecurityMetrics' Application Programming Interface  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@securitymetrics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ComplianceGet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'milestone_1': 'float',
        'milestone_2': 'float',
        'milestone_3': 'float',
        'milestone_4': 'float',
        'milestone_5': 'float',
        'milestone_6': 'float',
        'milestone_planned_compliance_date': 'datetime',
        'next_scan_date_utc': 'datetime',
        'next_scan_target': 'str',
        'overall_compliance': 'str',
        'overall_compliant_date': 'datetime',
        'overall_noncompliant_date': 'datetime',
        'saq_expiration': 'datetime',
        'saq_type': 'str',
        'scan_expiration_date_utc': 'datetime',
        'scan_result': 'str',
        'scan_target': 'str'
    }

    attribute_map = {
        'links': 'links',
        'milestone_1': 'milestone_1',
        'milestone_2': 'milestone_2',
        'milestone_3': 'milestone_3',
        'milestone_4': 'milestone_4',
        'milestone_5': 'milestone_5',
        'milestone_6': 'milestone_6',
        'milestone_planned_compliance_date': 'milestone_planned_compliance_date',
        'next_scan_date_utc': 'next_scan_date_utc',
        'next_scan_target': 'next_scan_target',
        'overall_compliance': 'overall_compliance',
        'overall_compliant_date': 'overall_compliant_date',
        'overall_noncompliant_date': 'overall_noncompliant_date',
        'saq_expiration': 'saq_expiration',
        'saq_type': 'saq_type',
        'scan_expiration_date_utc': 'scan_expiration_date_utc',
        'scan_result': 'scan_result',
        'scan_target': 'scan_target'
    }

    def __init__(self, links=None, milestone_1=None, milestone_2=None, milestone_3=None, milestone_4=None, milestone_5=None, milestone_6=None, milestone_planned_compliance_date=None, next_scan_date_utc=None, next_scan_target=None, overall_compliance=None, overall_compliant_date=None, overall_noncompliant_date=None, saq_expiration=None, saq_type=None, scan_expiration_date_utc=None, scan_result=None, scan_target=None):  # noqa: E501
        """ComplianceGet - a model defined in Swagger"""  # noqa: E501
        self._links = None
        self._milestone_1 = None
        self._milestone_2 = None
        self._milestone_3 = None
        self._milestone_4 = None
        self._milestone_5 = None
        self._milestone_6 = None
        self._milestone_planned_compliance_date = None
        self._next_scan_date_utc = None
        self._next_scan_target = None
        self._overall_compliance = None
        self._overall_compliant_date = None
        self._overall_noncompliant_date = None
        self._saq_expiration = None
        self._saq_type = None
        self._scan_expiration_date_utc = None
        self._scan_result = None
        self._scan_target = None
        self.discriminator = None
        if links is not None:
            self.links = links
        if milestone_1 is not None:
            self.milestone_1 = milestone_1
        if milestone_2 is not None:
            self.milestone_2 = milestone_2
        if milestone_3 is not None:
            self.milestone_3 = milestone_3
        if milestone_4 is not None:
            self.milestone_4 = milestone_4
        if milestone_5 is not None:
            self.milestone_5 = milestone_5
        if milestone_6 is not None:
            self.milestone_6 = milestone_6
        if milestone_planned_compliance_date is not None:
            self.milestone_planned_compliance_date = milestone_planned_compliance_date
        if next_scan_date_utc is not None:
            self.next_scan_date_utc = next_scan_date_utc
        if next_scan_target is not None:
            self.next_scan_target = next_scan_target
        if overall_compliance is not None:
            self.overall_compliance = overall_compliance
        if overall_compliant_date is not None:
            self.overall_compliant_date = overall_compliant_date
        if overall_noncompliant_date is not None:
            self.overall_noncompliant_date = overall_noncompliant_date
        if saq_expiration is not None:
            self.saq_expiration = saq_expiration
        if saq_type is not None:
            self.saq_type = saq_type
        if scan_expiration_date_utc is not None:
            self.scan_expiration_date_utc = scan_expiration_date_utc
        if scan_result is not None:
            self.scan_result = scan_result
        if scan_target is not None:
            self.scan_target = scan_target

    @property
    def links(self):
        """Gets the links of this ComplianceGet.  # noqa: E501


        :return: The links of this ComplianceGet.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ComplianceGet.


        :param links: The links of this ComplianceGet.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def milestone_1(self):
        """Gets the milestone_1 of this ComplianceGet.  # noqa: E501

        Percent complete of Prioritized Approach Milestone 1  # noqa: E501

        :return: The milestone_1 of this ComplianceGet.  # noqa: E501
        :rtype: float
        """
        return self._milestone_1

    @milestone_1.setter
    def milestone_1(self, milestone_1):
        """Sets the milestone_1 of this ComplianceGet.

        Percent complete of Prioritized Approach Milestone 1  # noqa: E501

        :param milestone_1: The milestone_1 of this ComplianceGet.  # noqa: E501
        :type: float
        """

        self._milestone_1 = milestone_1

    @property
    def milestone_2(self):
        """Gets the milestone_2 of this ComplianceGet.  # noqa: E501

        Percent complete of Prioritized Approach Milestone 2  # noqa: E501

        :return: The milestone_2 of this ComplianceGet.  # noqa: E501
        :rtype: float
        """
        return self._milestone_2

    @milestone_2.setter
    def milestone_2(self, milestone_2):
        """Sets the milestone_2 of this ComplianceGet.

        Percent complete of Prioritized Approach Milestone 2  # noqa: E501

        :param milestone_2: The milestone_2 of this ComplianceGet.  # noqa: E501
        :type: float
        """

        self._milestone_2 = milestone_2

    @property
    def milestone_3(self):
        """Gets the milestone_3 of this ComplianceGet.  # noqa: E501

        Percent complete of Prioritized Approach Milestone 3  # noqa: E501

        :return: The milestone_3 of this ComplianceGet.  # noqa: E501
        :rtype: float
        """
        return self._milestone_3

    @milestone_3.setter
    def milestone_3(self, milestone_3):
        """Sets the milestone_3 of this ComplianceGet.

        Percent complete of Prioritized Approach Milestone 3  # noqa: E501

        :param milestone_3: The milestone_3 of this ComplianceGet.  # noqa: E501
        :type: float
        """

        self._milestone_3 = milestone_3

    @property
    def milestone_4(self):
        """Gets the milestone_4 of this ComplianceGet.  # noqa: E501

        Percent complete of Prioritized Approach Milestone 4  # noqa: E501

        :return: The milestone_4 of this ComplianceGet.  # noqa: E501
        :rtype: float
        """
        return self._milestone_4

    @milestone_4.setter
    def milestone_4(self, milestone_4):
        """Sets the milestone_4 of this ComplianceGet.

        Percent complete of Prioritized Approach Milestone 4  # noqa: E501

        :param milestone_4: The milestone_4 of this ComplianceGet.  # noqa: E501
        :type: float
        """

        self._milestone_4 = milestone_4

    @property
    def milestone_5(self):
        """Gets the milestone_5 of this ComplianceGet.  # noqa: E501

        Percent complete of Prioritized Approach Milestone 5  # noqa: E501

        :return: The milestone_5 of this ComplianceGet.  # noqa: E501
        :rtype: float
        """
        return self._milestone_5

    @milestone_5.setter
    def milestone_5(self, milestone_5):
        """Sets the milestone_5 of this ComplianceGet.

        Percent complete of Prioritized Approach Milestone 5  # noqa: E501

        :param milestone_5: The milestone_5 of this ComplianceGet.  # noqa: E501
        :type: float
        """

        self._milestone_5 = milestone_5

    @property
    def milestone_6(self):
        """Gets the milestone_6 of this ComplianceGet.  # noqa: E501

        Percent complete of Prioritized Approach Milestone 6  # noqa: E501

        :return: The milestone_6 of this ComplianceGet.  # noqa: E501
        :rtype: float
        """
        return self._milestone_6

    @milestone_6.setter
    def milestone_6(self, milestone_6):
        """Sets the milestone_6 of this ComplianceGet.

        Percent complete of Prioritized Approach Milestone 6  # noqa: E501

        :param milestone_6: The milestone_6 of this ComplianceGet.  # noqa: E501
        :type: float
        """

        self._milestone_6 = milestone_6

    @property
    def milestone_planned_compliance_date(self):
        """Gets the milestone_planned_compliance_date of this ComplianceGet.  # noqa: E501

        Date when the merchant plans to become compliant with the Prioritized Approach Milestone  # noqa: E501

        :return: The milestone_planned_compliance_date of this ComplianceGet.  # noqa: E501
        :rtype: datetime
        """
        return self._milestone_planned_compliance_date

    @milestone_planned_compliance_date.setter
    def milestone_planned_compliance_date(self, milestone_planned_compliance_date):
        """Sets the milestone_planned_compliance_date of this ComplianceGet.

        Date when the merchant plans to become compliant with the Prioritized Approach Milestone  # noqa: E501

        :param milestone_planned_compliance_date: The milestone_planned_compliance_date of this ComplianceGet.  # noqa: E501
        :type: datetime
        """

        self._milestone_planned_compliance_date = milestone_planned_compliance_date

    @property
    def next_scan_date_utc(self):
        """Gets the next_scan_date_utc of this ComplianceGet.  # noqa: E501

        The date in UTC of the next scan that is going to run on any of the merchant's targets  # noqa: E501

        :return: The next_scan_date_utc of this ComplianceGet.  # noqa: E501
        :rtype: datetime
        """
        return self._next_scan_date_utc

    @next_scan_date_utc.setter
    def next_scan_date_utc(self, next_scan_date_utc):
        """Sets the next_scan_date_utc of this ComplianceGet.

        The date in UTC of the next scan that is going to run on any of the merchant's targets  # noqa: E501

        :param next_scan_date_utc: The next_scan_date_utc of this ComplianceGet.  # noqa: E501
        :type: datetime
        """

        self._next_scan_date_utc = next_scan_date_utc

    @property
    def next_scan_target(self):
        """Gets the next_scan_target of this ComplianceGet.  # noqa: E501

        The target of the next scan that will run for this merchant.  # noqa: E501

        :return: The next_scan_target of this ComplianceGet.  # noqa: E501
        :rtype: str
        """
        return self._next_scan_target

    @next_scan_target.setter
    def next_scan_target(self, next_scan_target):
        """Sets the next_scan_target of this ComplianceGet.

        The target of the next scan that will run for this merchant.  # noqa: E501

        :param next_scan_target: The next_scan_target of this ComplianceGet.  # noqa: E501
        :type: str
        """

        self._next_scan_target = next_scan_target

    @property
    def overall_compliance(self):
        """Gets the overall_compliance of this ComplianceGet.  # noqa: E501

        The Overall PCI Compliance of the merchant  # noqa: E501

        :return: The overall_compliance of this ComplianceGet.  # noqa: E501
        :rtype: str
        """
        return self._overall_compliance

    @overall_compliance.setter
    def overall_compliance(self, overall_compliance):
        """Sets the overall_compliance of this ComplianceGet.

        The Overall PCI Compliance of the merchant  # noqa: E501

        :param overall_compliance: The overall_compliance of this ComplianceGet.  # noqa: E501
        :type: str
        """

        self._overall_compliance = overall_compliance

    @property
    def overall_compliant_date(self):
        """Gets the overall_compliant_date of this ComplianceGet.  # noqa: E501

        The date of the last time the merchant went from Noncompliant to Compliant  # noqa: E501

        :return: The overall_compliant_date of this ComplianceGet.  # noqa: E501
        :rtype: datetime
        """
        return self._overall_compliant_date

    @overall_compliant_date.setter
    def overall_compliant_date(self, overall_compliant_date):
        """Sets the overall_compliant_date of this ComplianceGet.

        The date of the last time the merchant went from Noncompliant to Compliant  # noqa: E501

        :param overall_compliant_date: The overall_compliant_date of this ComplianceGet.  # noqa: E501
        :type: datetime
        """

        self._overall_compliant_date = overall_compliant_date

    @property
    def overall_noncompliant_date(self):
        """Gets the overall_noncompliant_date of this ComplianceGet.  # noqa: E501

        The date of the last time the merchant became Non-Compliant  # noqa: E501

        :return: The overall_noncompliant_date of this ComplianceGet.  # noqa: E501
        :rtype: datetime
        """
        return self._overall_noncompliant_date

    @overall_noncompliant_date.setter
    def overall_noncompliant_date(self, overall_noncompliant_date):
        """Sets the overall_noncompliant_date of this ComplianceGet.

        The date of the last time the merchant became Non-Compliant  # noqa: E501

        :param overall_noncompliant_date: The overall_noncompliant_date of this ComplianceGet.  # noqa: E501
        :type: datetime
        """

        self._overall_noncompliant_date = overall_noncompliant_date

    @property
    def saq_expiration(self):
        """Gets the saq_expiration of this ComplianceGet.  # noqa: E501

        The expiration date of the SAQ compliance. Will be null if the SAQ is not compliant.  # noqa: E501

        :return: The saq_expiration of this ComplianceGet.  # noqa: E501
        :rtype: datetime
        """
        return self._saq_expiration

    @saq_expiration.setter
    def saq_expiration(self, saq_expiration):
        """Sets the saq_expiration of this ComplianceGet.

        The expiration date of the SAQ compliance. Will be null if the SAQ is not compliant.  # noqa: E501

        :param saq_expiration: The saq_expiration of this ComplianceGet.  # noqa: E501
        :type: datetime
        """

        self._saq_expiration = saq_expiration

    @property
    def saq_type(self):
        """Gets the saq_type of this ComplianceGet.  # noqa: E501

        The SAQ type  # noqa: E501

        :return: The saq_type of this ComplianceGet.  # noqa: E501
        :rtype: str
        """
        return self._saq_type

    @saq_type.setter
    def saq_type(self, saq_type):
        """Sets the saq_type of this ComplianceGet.

        The SAQ type  # noqa: E501

        :param saq_type: The saq_type of this ComplianceGet.  # noqa: E501
        :type: str
        """

        self._saq_type = saq_type

    @property
    def scan_expiration_date_utc(self):
        """Gets the scan_expiration_date_utc of this ComplianceGet.  # noqa: E501

        The date in UTC of the either the scan that makes the merchant fail compliance or the most soon to expire.  # noqa: E501

        :return: The scan_expiration_date_utc of this ComplianceGet.  # noqa: E501
        :rtype: datetime
        """
        return self._scan_expiration_date_utc

    @scan_expiration_date_utc.setter
    def scan_expiration_date_utc(self, scan_expiration_date_utc):
        """Sets the scan_expiration_date_utc of this ComplianceGet.

        The date in UTC of the either the scan that makes the merchant fail compliance or the most soon to expire.  # noqa: E501

        :param scan_expiration_date_utc: The scan_expiration_date_utc of this ComplianceGet.  # noqa: E501
        :type: datetime
        """

        self._scan_expiration_date_utc = scan_expiration_date_utc

    @property
    def scan_result(self):
        """Gets the scan_result of this ComplianceGet.  # noqa: E501

        Whether the scan passed or failed  # noqa: E501

        :return: The scan_result of this ComplianceGet.  # noqa: E501
        :rtype: str
        """
        return self._scan_result

    @scan_result.setter
    def scan_result(self, scan_result):
        """Sets the scan_result of this ComplianceGet.

        Whether the scan passed or failed  # noqa: E501

        :param scan_result: The scan_result of this ComplianceGet.  # noqa: E501
        :type: str
        """

        self._scan_result = scan_result

    @property
    def scan_target(self):
        """Gets the scan_target of this ComplianceGet.  # noqa: E501

        The scan target of the scan used for the expiration date and result.  # noqa: E501

        :return: The scan_target of this ComplianceGet.  # noqa: E501
        :rtype: str
        """
        return self._scan_target

    @scan_target.setter
    def scan_target(self, scan_target):
        """Sets the scan_target of this ComplianceGet.

        The scan target of the scan used for the expiration date and result.  # noqa: E501

        :param scan_target: The scan_target of this ComplianceGet.  # noqa: E501
        :type: str
        """

        self._scan_target = scan_target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplianceGet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceGet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
