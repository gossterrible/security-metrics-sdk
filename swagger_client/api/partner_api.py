# coding: utf-8

"""
    SMApi

    SecurityMetrics' Application Programming Interface  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@securitymetrics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PartnerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_bank(self, body, **kwargs):  # noqa: E501
        """Create a Partner  # noqa: E501

        Create a Partner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bank(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartnerPost body: Partner to be added to the system (required)
        :return: PartnerWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_bank_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bank_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_bank_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a Partner  # noqa: E501

        Create a Partner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bank_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartnerPost body: Partner to be added to the system (required)
        :return: PartnerWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bank" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_bank`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartnerWithLinks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_merchant(self, body, partner_uuid, **kwargs):  # noqa: E501
        """Create a Merchant  # noqa: E501

        Create a Merchant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_merchant(body, partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantPost body: Merchant to be added to the system (required)
        :param str partner_uuid: UUID of Partner to add Merchant to (required)
        :return: MerchantWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_merchant_with_http_info(body, partner_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_merchant_with_http_info(body, partner_uuid, **kwargs)  # noqa: E501
            return data

    def create_merchant_with_http_info(self, body, partner_uuid, **kwargs):  # noqa: E501
        """Create a Merchant  # noqa: E501

        Create a Merchant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_merchant_with_http_info(body, partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantPost body: Merchant to be added to the system (required)
        :param str partner_uuid: UUID of Partner to add Merchant to (required)
        :return: MerchantWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'partner_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_merchant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_merchant`")  # noqa: E501
        # verify the required parameter 'partner_uuid' is set
        if ('partner_uuid' not in params or
                params['partner_uuid'] is None):
            raise ValueError("Missing the required parameter `partner_uuid` when calling `create_merchant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partner_uuid' in params:
            path_params['partner_uuid'] = params['partner_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners/{partner_uuid}/merchants', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MerchantWithLinks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_active_campaign_list_for_bank_uuid(self, partner_uuid, **kwargs):  # noqa: E501
        """Find active_campaign_emails  # noqa: E501

        Returns a List of active_campaign_emails for this Partner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_campaign_list_for_bank_uuid(partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partner_uuid: UUID of Partner to query (required)
        :return: CampaignEmailWithoutLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_active_campaign_list_for_bank_uuid_with_http_info(partner_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_active_campaign_list_for_bank_uuid_with_http_info(partner_uuid, **kwargs)  # noqa: E501
            return data

    def get_active_campaign_list_for_bank_uuid_with_http_info(self, partner_uuid, **kwargs):  # noqa: E501
        """Find active_campaign_emails  # noqa: E501

        Returns a List of active_campaign_emails for this Partner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_active_campaign_list_for_bank_uuid_with_http_info(partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partner_uuid: UUID of Partner to query (required)
        :return: CampaignEmailWithoutLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['partner_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_active_campaign_list_for_bank_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'partner_uuid' is set
        if ('partner_uuid' not in params or
                params['partner_uuid'] is None):
            raise ValueError("Missing the required parameter `partner_uuid` when calling `get_active_campaign_list_for_bank_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partner_uuid' in params:
            path_params['partner_uuid'] = params['partner_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners/{partner_uuid}/active_campaign_emails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignEmailWithoutLinks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_merchants_by_partner_id(self, partner_uuid, **kwargs):  # noqa: E501
        """Get Merchants by Partner  # noqa: E501

        Returns all Merchants for Partner by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_merchants_by_partner_id(partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partner_uuid: UUID of Partner to query for Merchants (required)
        :return: LinkedMerchantEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_merchants_by_partner_id_with_http_info(partner_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_merchants_by_partner_id_with_http_info(partner_uuid, **kwargs)  # noqa: E501
            return data

    def get_merchants_by_partner_id_with_http_info(self, partner_uuid, **kwargs):  # noqa: E501
        """Get Merchants by Partner  # noqa: E501

        Returns all Merchants for Partner by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_merchants_by_partner_id_with_http_info(partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partner_uuid: UUID of Partner to query for Merchants (required)
        :return: LinkedMerchantEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['partner_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_merchants_by_partner_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'partner_uuid' is set
        if ('partner_uuid' not in params or
                params['partner_uuid'] is None):
            raise ValueError("Missing the required parameter `partner_uuid` when calling `get_merchants_by_partner_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partner_uuid' in params:
            path_params['partner_uuid'] = params['partner_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners/{partner_uuid}/merchants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LinkedMerchantEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_partners(self, **kwargs):  # noqa: E501
        """Get all Partners  # noqa: E501

        Return all Partners and related metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partners(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date last_modified_date: Include partners with changes since this date
        :return: LinkedPartnerEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_partners_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_partners_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_partners_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Partners  # noqa: E501

        Return all Partners and related metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partners_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date last_modified_date: Include partners with changes since this date
        :return: LinkedPartnerEntries
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['last_modified_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_partners" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'last_modified_date' in params:
            query_params.append(('last_modified_date', params['last_modified_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LinkedPartnerEntries',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_partners_by_id(self, partner_uuid, **kwargs):  # noqa: E501
        """Find an Partner by their UUID  # noqa: E501

        Returns an Partner and related metadata by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partners_by_id(partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partner_uuid: UUID of Partner to query (required)
        :return: PartnerWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_partners_by_id_with_http_info(partner_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_partners_by_id_with_http_info(partner_uuid, **kwargs)  # noqa: E501
            return data

    def get_partners_by_id_with_http_info(self, partner_uuid, **kwargs):  # noqa: E501
        """Find an Partner by their UUID  # noqa: E501

        Returns an Partner and related metadata by UUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partners_by_id_with_http_info(partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str partner_uuid: UUID of Partner to query (required)
        :return: PartnerWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['partner_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_partners_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'partner_uuid' is set
        if ('partner_uuid' not in params or
                params['partner_uuid'] is None):
            raise ValueError("Missing the required parameter `partner_uuid` when calling `get_partners_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partner_uuid' in params:
            path_params['partner_uuid'] = params['partner_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners/{partner_uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartnerWithLinks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_active_campaign_for_bank_uuid(self, body, partner_uuid, campaign_email_uuid, **kwargs):  # noqa: E501
        """Start or stop a campaign  # noqa: E501

        Start/Stop Campaign emails  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_active_campaign_for_bank_uuid(body, partner_uuid, campaign_email_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignEmailPut body: Fields to be updated on the Partner (required)
        :param str partner_uuid: UUID of a Partner who owns the Campaign (required)
        :param str campaign_email_uuid: UUID of a CampaignEmail to update (required)
        :return: CampaignEmailWithoutLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_active_campaign_for_bank_uuid_with_http_info(body, partner_uuid, campaign_email_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_active_campaign_for_bank_uuid_with_http_info(body, partner_uuid, campaign_email_uuid, **kwargs)  # noqa: E501
            return data

    def modify_active_campaign_for_bank_uuid_with_http_info(self, body, partner_uuid, campaign_email_uuid, **kwargs):  # noqa: E501
        """Start or stop a campaign  # noqa: E501

        Start/Stop Campaign emails  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_active_campaign_for_bank_uuid_with_http_info(body, partner_uuid, campaign_email_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CampaignEmailPut body: Fields to be updated on the Partner (required)
        :param str partner_uuid: UUID of a Partner who owns the Campaign (required)
        :param str campaign_email_uuid: UUID of a CampaignEmail to update (required)
        :return: CampaignEmailWithoutLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'partner_uuid', 'campaign_email_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_active_campaign_for_bank_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `modify_active_campaign_for_bank_uuid`")  # noqa: E501
        # verify the required parameter 'partner_uuid' is set
        if ('partner_uuid' not in params or
                params['partner_uuid'] is None):
            raise ValueError("Missing the required parameter `partner_uuid` when calling `modify_active_campaign_for_bank_uuid`")  # noqa: E501
        # verify the required parameter 'campaign_email_uuid' is set
        if ('campaign_email_uuid' not in params or
                params['campaign_email_uuid'] is None):
            raise ValueError("Missing the required parameter `campaign_email_uuid` when calling `modify_active_campaign_for_bank_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partner_uuid' in params:
            path_params['partner_uuid'] = params['partner_uuid']  # noqa: E501
        if 'campaign_email_uuid' in params:
            path_params['campaign_email_uuid'] = params['campaign_email_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners/{partner_uuid}/active_campaign_emails/{campaign_email_uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CampaignEmailWithoutLinks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_bank_by_uuid(self, body, partner_uuid, **kwargs):  # noqa: E501
        """Update the information of a single Partner  # noqa: E501

        Update Partner info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bank_by_uuid(body, partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartnerPut body: Fields to be updated on the Partner (required)
        :param str partner_uuid: UUID of a Partner to update (required)
        :return: PartnerWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_bank_by_uuid_with_http_info(body, partner_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_bank_by_uuid_with_http_info(body, partner_uuid, **kwargs)  # noqa: E501
            return data

    def update_bank_by_uuid_with_http_info(self, body, partner_uuid, **kwargs):  # noqa: E501
        """Update the information of a single Partner  # noqa: E501

        Update Partner info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_bank_by_uuid_with_http_info(body, partner_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PartnerPut body: Fields to be updated on the Partner (required)
        :param str partner_uuid: UUID of a Partner to update (required)
        :return: PartnerWithLinks
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'partner_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_bank_by_uuid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_bank_by_uuid`")  # noqa: E501
        # verify the required parameter 'partner_uuid' is set
        if ('partner_uuid' not in params or
                params['partner_uuid'] is None):
            raise ValueError("Missing the required parameter `partner_uuid` when calling `update_bank_by_uuid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'partner_uuid' in params:
            path_params['partner_uuid'] = params['partner_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/vnd.sm-api-v1+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/partners/{partner_uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartnerWithLinks',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
